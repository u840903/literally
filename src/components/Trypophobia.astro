---

---

<span id="char-trypophobia" class="invisible absolute whitespace-pre leading-none">M</span>
<div id="container-trypophobia" class="whitespace-pre w-full h-full overflow-hidden cursor-pointer leading-none"></div>

<script>

    import {scheduleFrame} from "../helpers/scheduleFrame/scheduleFrame";
    import {type Dimensions, recalculateDimensions} from "../helpers/recalculateDimensions/recalculateDimensions";
    import {addSignatureToOutput} from "../helpers/addSignatureToOutput/addSignatureToOutput";

    function starttrypophobiaAnimation(container: HTMLElement, char: HTMLElement): void {
        let dimensions: Dimensions = recalculateDimensions(container, char);
        let ripples: { x: number; y: number; start: number }[] = [];
        const startTime: number = performance.now() - 266000;
        const config = {
            waveSpeed: 0.01618,
            waveFrequency: 0.15,
            waveAmplitude: 10,
            trypophobiaScale: 10,
            rippleDecay: 5,
            rippleAmplitude: 3,
            gradient: " .:-=+*#%@",
            fps: 60,
        };

        function randomNoise(x: number, y: number, t: number): number {
            return (
                Math.sin(x * 0.1 + y * 0.1 + t * 0.3) *
                Math.cos(x * 0.07 - y * 0.13 + t * 0.2)
            );
        }

        function handleClick(event: MouseEvent): void {
            const bounds = container.getBoundingClientRect();
            const x = Math.floor((event.clientX - bounds.left) / (bounds.width / dimensions.cols));
            const y = Math.floor((event.clientY - bounds.top) / (bounds.height / dimensions.rows));
            ripples.push({ x, y, start: performance.now() });
        }

        function renderFrame(): void {
            const elapsedTime: number = (performance.now() - startTime) / 1000;
            dimensions = recalculateDimensions(container, char);
            const { cols, rows } = dimensions;
            const output: string[] = [];
            const {
                waveSpeed,
                waveFrequency,
                waveAmplitude,
                trypophobiaScale,
                rippleDecay,
                rippleAmplitude,
                gradient,
            } = config;
            const gradLen: number = gradient.length;

            for (let y = 0; y < rows; y++) {
                let row = "";
                for (let x = 0; x < cols; x++) {
                    const baseWave: number = Math.sin(x * waveFrequency + elapsedTime * waveSpeed) * waveAmplitude;
                    const trypophobia: number = randomNoise(x, y, elapsedTime) * trypophobiaScale;
                    const rippleEffect: number = ripples.reduce((acc, ripple) => {
                        const distance: number = Math.sqrt((x - ripple.x) ** 2 + (y - ripple.y) ** 2);
                        const rippleTime: number = (performance.now() - ripple.start) / 1000;
                        const decay: number = Math.max(0, rippleAmplitude - rippleTime * rippleDecay);
                        return acc + Math.sin(distance - rippleTime * 10) * decay;
                    }, 0);
                    const wave: number = baseWave + trypophobia + rippleEffect;
                    const charIndex: number = Math.floor(Math.abs(wave) % gradLen);
                    row += gradient[charIndex];
                }
                output.push(row);
            }

            addSignatureToOutput(output, "Trypophobia");

            container.textContent = output.join("\n");

            // Remove expired ripples
            ripples = ripples.filter(
                (ripple) => (performance.now() - ripple.start) / 1000 < config.rippleAmplitude / config.rippleDecay
            );

            scheduleFrame(renderFrame);
        }

        window.addEventListener('resize', () => {
            dimensions = recalculateDimensions(container, char);
        });
        container.addEventListener('click', handleClick);
        renderFrame();
    }


    const trypophobiaContainer = document.getElementById('container-trypophobia') as HTMLElement;
    const trypophobiaChar = document.getElementById('char-trypophobia') as HTMLElement;

    starttrypophobiaAnimation(trypophobiaContainer, trypophobiaChar);
</script>